<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Note</title>
  
  
  <link href="https://jiangyao-zh.github.io/atom.xml" rel="self"/>
  
  <link href="https://jiangyao-zh.github.io/"/>
  <updated>2022-06-10T06:23:20.296Z</updated>
  <id>https://jiangyao-zh.github.io/</id>
  
  <author>
    <name>Jy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>golang检查数组中是否存在某个值</title>
    <link href="https://jiangyao-zh.github.io/2022/06/10/golang%E6%A3%80%E6%9F%A5%E6%95%B0%E7%BB%84%E4%B8%AD%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E6%9F%90%E4%B8%AA%E5%80%BC/"/>
    <id>https://jiangyao-zh.github.io/2022/06/10/golang%E6%A3%80%E6%9F%A5%E6%95%B0%E7%BB%84%E4%B8%AD%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E6%9F%90%E4%B8%AA%E5%80%BC/</id>
    <published>2022-06-10T02:12:52.000Z</published>
    <updated>2022-06-10T06:23:20.296Z</updated>
    
    <content type="html"><![CDATA[<h2 id="golang检查数组中是否存在某个值"><a href="#golang检查数组中是否存在某个值" class="headerlink" title="golang检查数组中是否存在某个值"></a>golang检查数组中是否存在某个值</h2><ul><li>类似PHP用的in_array功能实现<blockquote><p>in_array(mixed $needle, array $haystack, bool $strict &#x3D; false): bool</p></blockquote></li></ul><p>在Go 1.18 版本支持泛型以后，可以在<strong>pkg.go.dev</strong>中的slices包下查找<a href="https://pkg.go.dev/golang.org/x/exp@v0.0.0-20220609121020-a51bd0440498/slices#Contains">Contains</a>方法用作实现,例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br> <span class="hljs-string">&quot;fmt&quot;</span><br><br> <span class="hljs-string">&quot;golang.org/x/exp/slices&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br> <span class="hljs-keyword">var</span> date <span class="hljs-type">string</span> = <span class="hljs-string">&quot;createdAt&quot;</span><br> dateType := []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;createdAt&quot;</span>, <span class="hljs-string">&quot;updatedAt&quot;</span>&#125;<br> <span class="hljs-keyword">if</span> slices.Contains[<span class="hljs-type">string</span>](dateType, date) &#123;<br>  fmt.Println(<span class="hljs-string">&quot;yes&quot;</span>)<br> &#125; <span class="hljs-keyword">else</span> &#123;<br>  fmt.Println(<span class="hljs-string">&quot;no&quot;</span>)<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;golang检查数组中是否存在某个值&quot;&gt;&lt;a href=&quot;#golang检查数组中是否存在某个值&quot; class=&quot;headerlink&quot; title=&quot;golang检查数组中是否存在某个值&quot;&gt;&lt;/a&gt;golang检查数组中是否存在某个值&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="开发" scheme="https://jiangyao-zh.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Go" scheme="https://jiangyao-zh.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Docker+TP5部署</title>
    <link href="https://jiangyao-zh.github.io/2022/05/26/Docker-TP5%E9%83%A8%E7%BD%B2/"/>
    <id>https://jiangyao-zh.github.io/2022/05/26/Docker-TP5%E9%83%A8%E7%BD%B2/</id>
    <published>2022-05-26T02:25:19.000Z</published>
    <updated>2022-06-07T09:48:42.425Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用Compose对TP5进行部署"><a href="#使用Compose对TP5进行部署" class="headerlink" title="使用Compose对TP5进行部署"></a>使用Compose对TP5进行部署</h2><h3 id="软件版本说明（数据相对独立，本文不涉及数据库安装，建议使用mysql）"><a href="#软件版本说明（数据相对独立，本文不涉及数据库安装，建议使用mysql）" class="headerlink" title="软件版本说明（数据相对独立，本文不涉及数据库安装，建议使用mysql）"></a>软件版本说明（数据相对独立，本文不涉及数据库安装，建议使用mysql）</h3><ol><li>Nginx 1.16</li><li>PHP 7.2</li><li>CentOS 7.9（已安装）</li><li>Docker <a href="https://docs.docker.com/engine/release-notes/">20.10.14</a></li><li>docker-compose <a href="https://docs.docker.com/compose/release-notes/">1.29.1</a>（文件格式版本3.0，建议安装最新版本）</li></ol><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun<br></code></pre></td></tr></table></figure><p><a href="https://www.runoob.com/docker/centos-docker-install.html">详细教程</a></p><h3 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h3><ol><li><p>下载最新版的docker-compose文件</p> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">sudo curl -L https://github.com/docker/compose/releases/download/1.29.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure></li><li><p>添加可执行权限</p> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">sudo chmod +x /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure></li><li><p>查看版本</p> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">docker-compose -v<br>docker-compose version 1.29.1, build 8dd22a9<br></code></pre></td></tr></table></figure></li></ol><h3 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h3><ol><li><p>创建php7.2的docker目录(每个项目支持PHP较为不同，所以版本号命名方便区分)</p> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">mkdir /docker/php7.2<br></code></pre></td></tr></table></figure></li><li><p>在php7.2目录下新建docker-compose.yml文件</p> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs text">version: &quot;3&quot;<br><br>services:<br>fpm:<br>    build:<br>        context: ./ #Dockerfile路径<br>        dockerfile: php7.2_fpm_dockerfile #服务除了可以基于指定的镜像，还可以基于一份Dockerfile，我把Dockerfile放到下面<br>    restart: always<br>    networks:<br>       - db<br>    environment:<br>       - TZ=Asia/Shanghai<br>    privileged: true<br>    volumes:<br>       - /home/code/tp5:/var/www/tp5 #挂在程序目录，建议此目录与nginx挂在目录保持一致<br>networks:<br>db:<br>    external: true <br></code></pre></td></tr></table></figure> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">FROM php:7.2.24-fpm<br>RUN docker-php-ext-install pdo pdo_mysql #增加mysql扩展<br></code></pre></td></tr></table></figure></li><li><p>启动服务</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">docker-compose up -d <br></code></pre></td></tr></table></figure><p>在&#x2F;home&#x2F;code&#x2F;tp5目录下创建index.php进行测试</p></li></ol><h3 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h3><ol><li><p>创建nginx的docker目录</p> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">mkdir /docker/nginx<br></code></pre></td></tr></table></figure></li><li><p>在nginx目录下新建docker-compose.yml文件</p> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs text">version: &quot;3&quot;<br>services:<br>nginx:<br>restart: always<br>container_name: nginx<br>image: nginx<br>networks:<br>   - db<br>ports:<br>   - 80:80<br>volumes:<br>   - ./conf/conf.d:/etc/nginx/conf.d<br>   - ./etc/nginx/nginx.conf:/etc/nginx/nginx.conf<br>   - ./log:/var/log/nginx<br>   - ./wwww:/var/www<br>   - /home/code/tp5:/var/www/tp5 #挂在程序目录，建议此目录与php挂在目录保持一致<br>networks:<br>db:<br>    external: true    <br></code></pre></td></tr></table></figure></li><li><p>配置TP5的conf，在&#x2F;docker&#x2F;nginx&#x2F;conf&#x2F;conf.d下创建tp.conf文件</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs text">server &#123;<br>    listen 80;<br>    listen [::]:80;<br>    server_name 127.0.0.1;<br>        root /var/www/tp5;<br>        index index.html index.htm index.php default.html default.htm default.php;<br><br>    location / &#123;<br>            index index.html index.php;<br>            if (!-e $request_filename) &#123;<br>                    rewrite  ^(.*)$  /index.php?s=$1  last;<br>                    break;<br>            &#125;<br>    &#125;<br><br>    location ~ .*\.(php|php5)?$<br>    &#123;<br>        fastcgi_pass    php72_fpm_1:9000; #与docker ps命令列表中的NAMES保持一直<br>        fastcgi_index   index.php;<br>        fastcgi_param   SCRIPT_FILENAME  $document_root$fastcgi_script_name;<br>        fastcgi_param   SCRIPT_NAME      $fastcgi_script_name;<br>        include         fastcgi_params;<br>    &#125;<br><br>    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$<br>    &#123;<br>        expires      30d;<br>    &#125;<br><br>    location ~ .*\.(js|css)?$<br>    &#123;<br>        expires      12h;<br>    &#125;<br><br>    location ~ /.well-known &#123;<br>        allow all;<br>    &#125;<br><br>    location ~ /\.<br>    &#123;<br>        deny all;<br>    &#125;<br><br>    access_log  /var/log/nginx/tp5.access.log;<br>    error_log  /var/log/nginx/tp5.error.log; <br></code></pre></td></tr></table></figure></li><li><p>启动服务</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">docker-compose up -d <br></code></pre></td></tr></table></figure><p>测试&#x2F;&#x2F;127.0.0.1&#x2F;index.php</p></li></ol><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3>   <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs text">├── docker<br>│   ├── nginx<br>│   │   ├── conf<br>│   │   │   └── conf.d<br>│   │   │       └── tp5.conf<br>│   │   ├── docker-compose.yml<br>│   │   ├── etc<br>│   │   │   └── nginx<br>│   │   │       └── nginx.conf<br>│   │   ├── html<br>│   │   ├── log<br>│   │   │   ├── tp5.access.log<br>│   │   │   └── tp5.error.log<br>│   │   ├── timezone<br>│   │   └── wwww<br>│   ├── php72<br>│   │   ├── docker-compose.yml<br>│   │   └── php7.2_fpm_dockerfile<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;使用Compose对TP5进行部署&quot;&gt;&lt;a href=&quot;#使用Compose对TP5进行部署&quot; class=&quot;headerlink&quot; title=&quot;使用Compose对TP5进行部署&quot;&gt;&lt;/a&gt;使用Compose对TP5进行部署&lt;/h2&gt;&lt;h3 id=&quot;软件版本说</summary>
      
    
    
    
    <category term="运维" scheme="https://jiangyao-zh.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="Docker" scheme="https://jiangyao-zh.github.io/tags/Docker/"/>
    
    <category term="Compose" scheme="https://jiangyao-zh.github.io/tags/Compose/"/>
    
    <category term="PHP" scheme="https://jiangyao-zh.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>hexo new page fatal.(TypeError: Object.fromEntries is not a function)</title>
    <link href="https://jiangyao-zh.github.io/2022/04/25/hexo-new-page-fatal-TypeError-Object-fromEntries-is-not-a-function/"/>
    <id>https://jiangyao-zh.github.io/2022/04/25/hexo-new-page-fatal-TypeError-Object-fromEntries-is-not-a-function/</id>
    <published>2022-04-25T09:12:52.000Z</published>
    <updated>2022-04-26T09:45:54.486Z</updated>
    
    <content type="html"><![CDATA[<h2 id="生成hexo文章遇到TypeError-Object-fromEntries-is-not-a-function错误"><a href="#生成hexo文章遇到TypeError-Object-fromEntries-is-not-a-function错误" class="headerlink" title="生成hexo文章遇到TypeError: Object.fromEntries is not a function错误"></a>生成hexo文章遇到TypeError: Object.fromEntries is not a function错误</h2><h3 id="排查问题"><a href="#排查问题" class="headerlink" title="排查问题"></a>排查问题</h3><p>NodeJs版本过低原因，需要 12.x 以上版本才行，本地版本是10.13</p><h3 id="处理结果"><a href="#处理结果" class="headerlink" title="处理结果"></a>处理结果</h3><p>升级NodeJs，升级方法如下（Linux环境）：</p><ol><li><p>查看版本</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">node –v <br></code></pre></td></tr></table></figure></li><li><p>安装n模块</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">npm install -g n<br></code></pre></td></tr></table></figure></li><li><p>安装最新的稳定版本</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">n stable<br></code></pre></td></tr></table></figure></li><li><p>安装完成后，查看Node的版本，检查升级是否成功</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">node -v<br></code></pre></td></tr></table></figure></li></ol><p>最后，重新创建hexo即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;生成hexo文章遇到TypeError-Object-fromEntries-is-not-a-function错误&quot;&gt;&lt;a href=&quot;#生成hexo文章遇到TypeError-Object-fromEntries-is-not-a-function错误&quot; cl</summary>
      
    
    
    
    <category term="Web" scheme="https://jiangyao-zh.github.io/categories/Web/"/>
    
    
    <category term="NodeJs" scheme="https://jiangyao-zh.github.io/tags/NodeJs/"/>
    
    <category term="Hexo" scheme="https://jiangyao-zh.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
